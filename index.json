[{"content":"\n\n众所周知，mojang 决定迁移账号到微软那了，并且最近购买游戏也需要使用微软账号。这也导致了使用微软账号购买的玩家，无法使用第三方启动器登录游戏。\n\n大概是一天前，wiki.vg 上更新了[新的微软身份认证的流程](https://wiki.vg/Microsoft_Authentication_Scheme)，所以我就折腾了下其中前半部分的认证。\n\n和之前所使用的认证系统不同，这次要求在浏览器中登录账号。这无疑增加了复杂度，至少对于我弄的命令行启动器来说，就变得有点麻烦了。\n\n我选用的方法是 DevTools Protocol，使用这个[开源项目](https://github.com/go-rod/rod)，只需要安装了 chrome 就能用，无论是 windows 还是 linux。\n\n## 使用方法\n先到[这](https://github.com/xmdhs/msauth/actions?query=workflow%3AGo)下载编译好的二进制文件，然后运行。\n\n之后会弹出一个浏览器的窗口，在其中登录就行。登录完后，会返回一串 json，类似\n\n    {\"ok\":true,\"err\":\"\",\"code\":\"code\"}\n\n如果 ok 是 true 也就代表获取成功了。之后就可以继续接下来的[一些步骤](https://wiki.vg/Microsoft_Authentication_Scheme#Authorization_Code_-.3E_Authorization_Token)\n\n因为这些步骤也就是只需要 post 就好，我这里就不完成这些了。","cover":"","link":"10.html","preview":"","title":"简单完成 java 版微软账号的部分登录流程"},{"content":"\n\n今天用了大半天的时间去迁移博客。从 blogspot 迁移到 github。\n\n为什么要迁移呢？主要也是今天看到 google photos 将不再免费无限储存了。而 blogspot 上传图片得上传到 google photos，再加上怕 google 哪天把 blogspot 砍了，所以就迁移了。\n\n## 博客的构架\n目前是部署在 github 上，使用 github pages。\n\n使用 [ink](https://github.com/InkProject/ink) 渲染生成静态页面。\n\n使用 cloudflare 作为 cdn。\n\n使用 github actions 自动把提交的 md 使用 ink 弄成 html 页面，然后推送到 github 上。\n\n## 为什么是 ink\n因为 ink 是 Go 写的，而我比较熟悉 Go。我知道 hugo 也是用 Go 写的，但是实在是太复杂了，而且配置有点麻烦。\n\n虽然目前 ink 似乎停止维护了，但是也没有什么比较严重的 bug，真有，我大概也能自己修吧。\n\n说起了几年前，我也用过 ink 来搭建博客过的。\n\n我现在使用的 ink 是自己从 github 的最新版本中，用 Go 1.15.4 编译的。所以编译后的二进制文件要小一点。另外不知道为什么，有一些地方无法通过编译，于是就自己修改了下。\n\n## github actions 是如何设置的\n可以直接来这里看 [https://github.com/xxmdhs/blog/blob/main/.github/workflows/build.yml](https://github.com/xxmdhs/blog/blob/main/.github/workflows/build.yml)\n\n具体而言，就是利用 actions/checkout 把项目内各个分支 clone 下来，然后用 cp 命令把需要的文件放到需要的位置，然后构建，推送就完事。\n\n总共用了三个分支，main 储存 markdown 文档，增加博文时，直接在这里新建文件，然后推送到 github 上就行。\n\nbuild 分支顾名思义，就是用了构建页面用的分支，里面包含了 ink 的配置文件，和博客的模板。\n\ngh-pages 里放的就是最终弄完的 html 文件了。\n\n## 选用的评论系统\n花了我大半天的时间就主要花在选择评论系统上。\n\ngitalk 以前用过，很好用。但是我现在部署后，总是报 404，看相关的 issues 也没有给出一个具体的解决的方法，那就只好弃用了。\n\n尝试了下 telegram 的 comments，试了半天，就是没弄成。\n\n所以最后还是用上了 Disqus，国内的看不到就看不到吧，反正没指望谁看这个博客。","cover":"","link":"1.html","preview":"","title":"迁移博客后的第一篇博文"},{"content":"\n\n最近，准确说不是最近，只是把之前给 mcbbs 爬取的爬虫改成了可配置的，并完成了生成展示表格的部分。\n\n项目地址是 [https://github.com/xmdhs/creditget](https://github.com/xmdhs/creditget)\n\n具体介绍和使用方法项目中的 README.md 有写。\n\n## 碎碎念\n总之下次才不会这样折腾了，要不是已经爬取了不少数据，不好换，不然一定要用 orm，不然总感觉自己不是在编程而是在罚抄样的。。\n\n偷懒没用 context，下次一定加上。（为了平滑结束啥的）\n\n","cover":"","link":"2.html","preview":"","title":"discuz 通用论坛用户积分爬取排序"},{"content":"\n\n算是标题党了，毕竟按照 tos 中，我这应该还算不上是滥用的。\n\n简单说，我最近写了两个（准确说是三个，不过有一个没公开），利用 github actions 来自动给某些网站自动签到的程序。\n\n相较于部署在某个服务器，使用 actions 根本不用去想如何维护服务器，而且一个月有着 2000 分钟的免费时长，不用白不用。\n\n## 项目地址\n具体而言是这两个项目\n\n[https://github.com/xxmdhs/tiebasign](https://github.com/xxmdhs/tiebasign) [https://github.com/xxmdhs/v2exsign](https://github.com/xxmdhs/v2exsign)\n\n具体如何使用，项目中的 README.md 也有描述，所以我就不复述了。\n\n## 区别\n虽然说 github 上像这种给贴吧或者 v2ex 签到的项目多的是，但是我这个还是有一点优势的。\n\n比如说贴吧的是多线程的，或者是是协程？，总之签到速度很快就是。当然内存占用和 cpu 占用对于这里没啥意义。\n\n除此之外，相较于某些其他项目只是打印错误，或者直接忽略错误。我这个如果出错就会重试，出错多次就会发邮件通知。\n\n## 编写的过程\n虽然都是两个很简单的东西，但是依然能写出 bug 来。。\n\nv2exsign 本身倒是没啥，不过有一次的提交，误把 cookie [提交到了 github 上](https://github.com/xxmdhs/v2exsign/commit/5e0c71a96c45f0fe98f1bebe8a44912577a66d5a#diff-2873f79a86c0d8b3335cd7731b0ecf7dd4301eb19a82ef7a1cba7589b5252261R100)，过了 9 天才发现，好在没人去用。。\n\ntiebasign 则是出错重试时，没有考虑关闭之前开启的协程，就可能导致一些问题。解决方法就是直接用上下文 context 来关闭协程了，这似乎也是推荐的做法来着。\n\n所以说还是要多写来着。","cover":"","link":"3.html","preview":"","title":"如何滥用 github actions"},{"content":"\n\n其实我还是挺喜欢 win10 的，用起来也比较满意。但是它还是一次又一次的向我证明它那 bug10 的外号，虽然问题大多不是很严重，但是很影响使用。\n\n## 错误表现\n打开开始菜单，点击设置的图标毫无反应。\n\n桌面上右键点击显示设置显示一个找不到相关应用的提示，具体图忘记截了，可以参照这个，不过我的显示和他的不是完全一样。\n\n![图片来自 https://www.zhihu.com/question/270571498](https://i.loli.net/2020/11/13/vWb7LJMAgSBE38U.jpg)\n\n这就让人头疼了。\n\n于是上网搜索，搜索的大多数结果都是 answers.microsoft.com 的，其中的答案也多半是，sfc /SCANNOW\n\n他们似乎只要遇到 win10 自身的问题，回答必定就是 sfc /SCANNOW ，还不行就是重装系统。上次 win10 也是遇到这种小毛病，打开开始菜单，往下滚动滚轮，就开始菜单就立刻崩溃，answers.microsoft.com 的回答依然是 sfc /SCANNOW 之类的。不过其中倒有人给出了解决的办法，创建一个新的用户然后就可以解决。但是这可让人折腾了，之前的设置软件，环境变量全都要重新配置。\n\n## 解决办法\n这次在知乎上找到了解决的办法，虽然不是我自己研究出来的办法，这样复制一遍似乎有点营销号的感觉。不过我的目的是记录一下，记录对我有效的办法。\n\n参考的答案是 [https://www.zhihu.com/question/270571498/answer/355261490](https://www.zhihu.com/question/270571498/answer/355261490)\n\n其中的方法1和方法2早就在 answers.microsoft.com 找到，也不出意外的没有作用。\n\n方法3需要删除文件，但是解除文件占用有点麻烦，于是我就直接尝试了其中的方法4，然后没有重启电脑，也成功解决了设置无法打开的问题。\n\n其中的命令摘录一下\n\n`Get-AppxPackage | % { Add-AppxPackage -DisableDevelopmentMode -Register \"$($_.InstallLocation)\\AppxManifest.xml\" -verbose }`\n\n总之建议经常备份，有问题直接恢复备份，省得折腾。","cover":"","link":"4.html","preview":"","title":"bug10 的奇妙 bug，设置无法打开"},{"content":"\n\n总是会有插入代码的需求嘛，但是这个 blogger 没有提供插入代码的功能就弄的很是麻烦。\n上网找了一些教程，但是大多很麻烦，需要切换到 html 视图什么的，这就搞得很不方便了。\n\n所以我自己折腾了一下，弄了一个应该比较方便的，插入代码的方法。\n\n## 需要做的工作\n简单来说，打开“布局”，添加一个\t“HTML/JavaScript小工具”，虽然直接修改模板来增加 js 和 css 也是可以的，但是毕竟要麻烦不少。\n\n![](https://i.loli.net/2020/11/13/Age8VjlFGX3Pxih.png)\n\n添加的小工具放到哪里都是可以的，反正都能加载。\n\n插入的内容是\n\n    \u003cstyle type=\"text/css\"\u003e\n        pre.highlight {\n        font-size: small;\n        font-family: sans-serif;\n        letter-spacing: .015em;\n        line-height: 130%;\n        overflow-x: auto;\n        overflow-y: auto;\n        background-color: #f6f8fa;\n        padding: .5em;\n        display: block;\n        color: #24292e;\n    }\n    code,kbd,pre,samp {\n        font-size: small;\n        font-family: sans-serif;\n    }\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        if ($(\"blockquote\").length \u003e 0) {\n            for (let index = 0; index \u003c $(\"blockquote\").length; index++) {\n            let temp = $($(\"blockquote\").get(index)).children(\"div\")\n            $($(\"blockquote\").get(index)).after($(\"\u003cpre class=\\\"highlight\\\"\u003e\u003c/pre\u003e\").html($(\"\u003ccode\u003e\u003c/code\u003e\").html(temp)))\n        }\n        $(\".highlight\").find(\"span\").removeAttr(\"style\")\n        $(\"blockquote\").remove()\n    }\n    \u003c/script\u003e \n\n填进去保存就行了\n\n![](https://i.loli.net/2020/11/13/Wt1sqmhe6zcOoGi.png)\n\n## 使用\n就是为了追求简单，才弄的这些东西的，所以使用起来应该比较简单。\n\n首先在编辑器中，选择“正常”\n\n![](https://i.loli.net/2020/11/13/jNfMUk8K7TIpVEB.png)\n\n然后粘贴代码，最好是 ctrl+shift+v 粘贴为纯文本。\n\n然后用鼠标选择这段代码，点击引用，然后代码就插入成功了。\n\n![](https://i.loli.net/2020/11/13/GnVS8QcE29IBipg.png)\n\n确实这样导致引用无法使用了，但是把引用和插入代码共用一个样式大概也没什么问题吧。","cover":"","link":"5.html","preview":"","title":"在 blogger 上插入代码"},{"content":"\n\n说的就是这个\n\n![](https://i.loli.net/2020/11/13/PCuMiRQj8EVgza2.png)\n\n之前弄的一个虽然没啥用，但是能方便我看成绩评价的东西。\n\n如何实现的呢？说起来也是很简单的。\n\n## 抓包\n首先得先找到 arcaea 的 api，获取数据才能生成图片嘛。网上并没有找到什么有用的文档，所以就只能自己抓包了。\n\n用来抓包的软件是 httpcanary。因为安卓的某些安全机制，导致无法直接抓包。\n\n软件上的建议是用“平行空间”安装软件，然后进行抓包。但是因为 arcaea 的某些机制还是什么，导致“平行空间”克隆后软件无法使用。\n\n所以我就试着把游戏安装到 virtualxposed，然后尝试抓包 virtualxposed。结果当然是成功了。不过如果有 root 权限或者用 ios 设备，就不用这么麻烦了。\n\n    GET /11/compose/aggregate?calls=%5B%7B%20%22endpoint%22%3A%20%22%2Fuser%2Fme%22%2C%20%22id%22%3A%200%20%7D%5D HTTP/1.1\n    Accept-Encoding: identity\n    Content-Type: application/x-www-form-urlencoded; charset=utf-8\n    Authorization: Bearer LgSB/********\n    Platform: android\n    AppVersion: 2.6.1c\n    i: 2550615\n    User-Agent: Dalvik/2.1.0 (Linux; U; Android 10; GM1900 Build/QKQ1.190716.003)\n    Host: arcapi.lowiro.com\n    Connection: Keep-Alive\n\n具体的发送请求抓包下来的数据就是类似这样，不过 api 也是会发生改变的，所以还是得自己去抓包。\n\n这个请求是获取好友列表的数据的。关键的在 Authorization，这个应该是账号相关。\n\n响应的数据是 json，具体示例太长，就放在这个链接里。[https://paste.ubuntu.com/p/5y5NZTJ8JV/](https://paste.ubuntu.com/p/5y5NZTJ8JV/)\n\n大概其中的字段，猜也能猜出是什么含义吧。对于我要做签名档，有用的部分就是\n\n               \"friends\": [\n                    {\n                        \"is_mutual\": false,\n                        \"is_char_uncapped_override\": false,\n                        \"is_char_uncapped\": true,\n                        \"is_skill_sealed\": false,\n                        \"rating\": 961,\n                        \"join_date\": 1572538347498,\n                        \"character\": 2,\n                        \"recent_score\": [\n                            {\n                                \"rating\": 0,\n                                \"modifier\": 2,\n                                \"time_played\": 1587250285320,\n                                \"health\": -1,\n                                \"best_clear_type\": 0,\n                                \"clear_type\": 0,\n                                \"miss_count\": 476,\n                                \"near_count\": 0,\n                                \"perfect_count\": 0,\n                                \"shiny_perfect_count\": 0,\n                                \"score\": 0,\n                                \"difficulty\": 0,\n                                \"song_id\": \"pragmatism\"\n                            }\n                        ],\n                        \"name\": \"xmdhs\",\n                        \"user_id\": 2476615\n                    }\n                ],\n            \n其中就是好友的一些基本信息，和最后一次打的歌了，具体的数值的对应关系，可以看我下面放出的签名档的源码。\n\n所以要获取信息，还得创建一个小号，然后添加你的大号为好友。\n\n然后要做的就很简单了，随便用个语言，画图，填字，生成图片然后弄个 http 的服务器就行了。\n\n## 开源\n一共用了两种语言去写过，Java 的懒得维护而且占内存太大，没用框架估计性能不如 Go，就没去管了。Go 写的是可以用的。\n\n不过 java 的其中的一些注释还是有用的，比如\n\n                public String name;//名字\n                public String rating;//ptt\n                public List\u003cRecent\u003e recent_score;\n                public static class Recent{\n                    public String clear_type; //通过类型？ 0 大概是没通过, 1 是普通，5 是困难 ,3 是 p ，简单是 4，full recall 是 2.\n                    public String miss_count; //lost\n                    public String near_count; //far\n                    public String perfect_count; //pure\n                    public String shiny_perfect_count; //大 p\n                    public String score; //分数\n                    public String rating; //评价\n                    public String difficulty; //难度，0 为过去，1为现在，2 为未来。\n                    public String song_id; //曲目\n                    public Long time_played; //上次游玩时间，为 unix 时间戳。（毫秒\n                }\n            \n不过嘛，这些已经是旧的了，新的可以看 go 版本的源码。比如 [https://github.com/xmdhs/arcimg/blob/master/arcimg/json.go](https://github.com/xmdhs/arcimg/blob/master/arcimg/json.go)","cover":"","link":"6.html","preview":"","title":"弄一个显示 arcaea ptt 的签名档"},{"content":"\n\n虽然说是不折腾，但是完全不折腾是不可能的，不然实在是太丑也不好用。不过折腾的地方也比较少，效果我自己觉得还是不错的。\n\n## 主题\n主题一开始使用的是“Simply Simple”，挺不错的，很简洁。不过不是自适应的主题，手机界面就有点丑了，去修改模板的 html 可是可以，但是没有必要。\n\n又去试了下“Light”，是自适应的主题，配色也不错。不过因为里面的首字下沉不咋地，应该是对中文的首字下沉支持不行，而且我也不喜欢首字下沉。也就没用这个主题。\n\n之后也是现在用的主题是“Contempo Light”，也挺简洁的，有点 Material Design 的感觉。背景图片有点不喜欢，于是就用 css 换掉，换成了 bing 的每日一图。顺便再用 css 隐藏了“主题背景图片创建者”，毕竟现在用的是 bing 的图片了。\n\n## 布局\n布局中禁用了“精选博文”和“热门博文”，总共能有几篇博文呢？当然是禁用掉了。\n\n“我的简介”也禁用掉了，我自己当然没什么好介绍的。\n\n## 自定义的 css 和 js\nblogger 好就好在这里，可以随意的添加自己的 js 和 css，甚至还能编辑主题的 html。\n\n不过我没有编辑主题的 html，而是通过布局中的“HTML/JavaScript”小工具来自定义的。这样做的好处是修改方便。\n\n首先添加了这个\n\n    img {\n    max-width: 100%;\n    max-height: 100%;\n    }\n\n之前的主题图片如果选择原始大小会戳破框架，虽然现在的主题也设置了 max-width，但是我不删除也不碍事嘛。\n\n其次是设置了主题的背景，这个是直接参照主题自己的 css，修改了其中背景的链接，没啥技术含量。\n\n之后是添加了两个 js。\n\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/anchor-js/anchor.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003eanchors.add();\u003c/script\u003e\n\n这个是给标题增加锚点，就像这样\n\n![](https://i.loli.net/2020/11/13/hmSnvIYULcVtD1X.png)\n\n复制这个链接，之后打开这个链接就会跳转到到指定的位置，就不用自己往下翻了。\n\n    \u003cscript src=\"https://cdnjs.loli.net/ajax/libs/instantclick/3.0.1/instantclick.min.js\" data-no-instant\u003e\u003c/script\u003e\n    \u003cscript data-no-instant\u003eInstantClick.init()\u003c/script\u003e\n\n~~这个是预加载页面，当鼠标悬停在某个本站的链接上，就会开始预加载，这样在鼠标悬停和点下的几百毫秒间的时间就不会浪费，可以达到看上去非常快的网页打开速度。（不过毕竟是在 blogspot 上，快也快不到哪里去）~~\n\n因为会导致一点问题，所以还是去除了。\n\n## 其他\n~~虽然很多地方很满意，但是这个日期的格式太不符合我的习惯了，无论怎么选，都只有日期在前年份在后。用 js 去修改可是可以，但是没必要。~~\n\n越看越不爽，于是就用 js 改掉了，顺便再导入了一个 jquery。\n\n~~还有就是编辑器不能插入代码，我也就只能退而求其次的直接粘贴，然后调小字体。不支持 markdown 也可以理解，但是有就好了。~~\n\n现在用 js 实现了，虽然还是不方便，但是也能用了。\n\n引用的样式也很奇怪，是这样的\n\n![](https://i.loli.net/2020/11/13/sNaYObcf9pPKn6Q.png)\n\n~~之后用 css 改改吧。~~\n\n现在改成了这样\n\n    test 测试\n\ncss 是用 github.com/necolas/normalize.css，所以似乎还得按照 mit 协议加一行注释。","cover":"","link":"7.html","preview":"","title":"对于博客的一点点折腾"},{"content":"\n\n按照惯常的博客玩法，写几篇关于折腾博客的博文，然后就再也没有更新了。\n\n不过我这里并不是这样的，我这写的是之前折腾[某个论坛](https://www.mcbbs.net/forum.php)的站内搜索，而不是博客的站内搜索，毕竟 blogger 就已经提供了一个很棒的站内搜索了。\n\n## 起因\n这个论坛因为一些原因，导致了其中的问答版块的帖子需要登录后才能查看。而论坛本身的搜索功能很差，需要登录后才能查看就导致了搜索引擎无法爬取到其中的内容。这让我有些不爽。\n\n所以，我就自己闲着无聊用 golang 通过 discuz 的 api 爬取了问答版的所有帖子，再用 sqlite 储存，搜索。\n\n其中还是踩了一些坑吧，或者说不算坑，只能算自己菜。\n\n## 最开始的构思\n一开始看 golang 的 [sqlite 驱动](https://github.com/mattn/go-sqlite3)时，看到了 fts5，然后看到了 sqlite_icu，想着是不是可以用这个来实现一个简单的站内搜索。\n\n可是测试的时候，创建数据库却总说找不到 icu 分词器，折腾了老半天，最后翻了下 [sqlite 的官方文档](https://www.sqlite.org/fts5.html)才发现 fts5 不能用 icu，但是这个驱动却似乎只能用 fts5，实在有点搞不懂。\n\n## 解决的办法\n但是我又不想换成 mysql，毕竟多装一个软件还是挺麻烦的。网上找了找关于全文搜索的文章，发现还可以事先分词，然后弄全文索引。这样即使用不支持中文的全文索引也能搜索到想要的内容。\n\n知道了办法那就好办了，又到网上找了找，golang 中用来分词的用的多的有两个。一个是用 cgo 调用 c++ 的代码，另一个是用的纯 go 编写。\n\n肯定用 go 的，cgo 毕竟太麻烦。\n\n我爬取问答版中帖子的数据，是先储存在 sqlite 的，所以需要做的工作仅仅是创建一个 fts5 的虚拟表，然后分词再存入就行了。\n\n一开始的工作还是挺顺畅的，不过没过多久，cpu 的占用就上了 100% 左右，或许应该算正常，不过我修改了下代码，让其显示进度，结果发现卡在了一个位置上。不知道是这个分词项目的什么 bug，我也懒得去分析。然后就换成了 c++ 实现的分词。\n\nc++ 的分词速度都要快了不少，不过上传到服务器运行程序时却报错 so 的版本过低。\n\n    （./upsql: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by ./upsql)）\n\n想想也很正常，服务器用的是 centos7.3，之前不知道听了谁的说 centos 稳定，稳定的代价就是这样了。\n\n换系统就更麻烦，于是按照网上的教程一套下来，也解决了这个问题。现在回想一下，或许在另一台机子上，用 ldd 命令，查看程序的依赖库的路径，然后复制过来，或许就可以解决问题了。\n\n## 搜索的实现\n分词则是把一段文字变成用 / 分隔的文本，类似/这样/。然后存入 sqlite 中。\n\n这样如果用某个词语，就能搜索到这段语句。\n\n一开始的实现就是直接用用户输入的短语去搜索，如果用了一句完整的话，就搜索不到任何内容了。\n\n所以我之后，把用户用来搜索的短句，也进行分词。然后根据 sqlite 的搜索语法，加上引号。\n\n比如使用 `崩溃报告` 实际就会用 `SELECT key,subject,source FROM qafts5 WHERE qafts5 MATCH \"崩溃 报告\" ORDER BY rank LIMIT 20 OFFSET ?` 去进行搜索。\n\nsqlite 的搜索语法认为引号包着的是短语，就可以搜索到“崩溃/报告”和“崩溃啊报告”之类的内容。但是不会搜索到“报告崩溃”。\n\n之后又实现了几个简单的搜索语法，这就不需要多说了。\n\n## 网站界面的实现\n网站界面是直接偷 github 的 css，mit 开源的，也就是~~不算偷~~。然后用 markdown 转 html，再到其中加上一个输入框，就大功告成。\n\n具体的内容也没什么好说的，想看的可以自己去看源码。\n\n## 总结\nsqlite 确实还是挺好用的，除了写入很差，读取的性能和全文搜索的速度还是非常快的。反正我弄了这个站内搜索，应该不会有什么人用，我自己一个人够用就行了，不会碰到性能问题的。更何况我也只租的起一核的小鸡。\n\n## 开源地址\n[https://github.com/xmdhs/searchqanda](https://github.com/xmdhs/searchqanda)\n\n网站地址则是 [https://files.xmdhs.top/search](https://files.xmdhs.top/search)","cover":"","link":"8.html","preview":"","title":"简单的弄一个站内搜索"},{"content":"\n\n按照惯例，第一篇博文应该是说自己如何折腾，部署了博客。我这虽然是用的 blogspot，但是也能水一篇博文的。\n\n说起来之前也弄过博客。之前是部署在 github 上，一样不需要花一分钱。但是毕竟还是需要折腾，我现在不想折腾了。毕竟博客最重要的是写东西，而不是折腾博客程序的\n\n因为懒得折腾，所以也没怎么设置和美化这个博客。能用自己的域名也懒得去绑定。\n\nblogspot 的自由度也是挺高，甚至能自己添加 js 和 css，而且免费且使用很方便，甚至还有手机的 app。虽然国内确定是无法访问，但是弄博客不一定是要给别人看的嘛，自己随便写写，当记事本也是挺不错的。\n\n之后应该会写一点我编程上的一些东西吧，别人看不看无所谓，自己之后能看就行。","cover":"","link":"9.html","preview":"","title":"第一篇博文"}]